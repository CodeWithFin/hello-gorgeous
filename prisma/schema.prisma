// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User account model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  bookings      Booking[]
  reviews       Review[]
  addresses     Address[]
  loyaltyPoints Int       @default(0)
  wishlist      Product[] @relation("UserWishlist")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product-related models
model Product {
  id          String        @id @default(cuid())
  name        String
  description String        @db.Text
  price       Decimal       @db.Decimal(10, 2)
  salePrice   Decimal?      @db.Decimal(10, 2)
  images      String[]
  stock       Int
  sku         String        @unique
  categories  Category[]
  brand       Brand         @relation(fields: [brandId], references: [id])
  brandId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  isInStore   Boolean       @default(true)
  attributes  Json?
  reviews     Review[]
  orderItems  OrderItem[]
  featuredIn  Collection[]  @relation("CollectionProducts")
  wishlistedBy User[]       @relation("UserWishlist")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  image       String?
  parentId    String?
  parent      Category? @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  products    Product[]
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  logo        String?
  products    Product[]
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  image       String?
  isActive    Boolean   @default(true)
  products    Product[] @relation("CollectionProducts")
}

// Order-related models
model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  paymentMethod   PaymentMethod
  paymentId       String?
  discountCode    String?
  discountAmount  Decimal?    @db.Decimal(10, 2)
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  addressId       String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  notes           String?     @db.Text
  isPickupInStore Boolean     @default(false)
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)
}

model Address {
  id         String  @id @default(cuid())
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  phone      String?
  orders     Order[]
}

// Booking-related models
model Service {
  id           String    @id @default(cuid())
  name         String
  description  String    @db.Text
  price        Decimal   @db.Decimal(10, 2)
  durationMins Int
  image        String?
  isActive     Boolean   @default(true)
  categories   Category[]
  bookings     Booking[] @relation("BookingServices")
}

model Booking {
  id         String        @id @default(cuid())
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  services   Service[]     @relation("BookingServices")
  specialist Staff?        @relation(fields: [staffId], references: [id])
  staffId    String?
  date       DateTime
  endTime    DateTime
  status     BookingStatus @default(PENDING)
  notes      String?       @db.Text
  subtotal   Decimal       @db.Decimal(10, 2)
  discount   Decimal?      @db.Decimal(10, 2)
  total      Decimal       @db.Decimal(10, 2)
  paymentId  String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Staff {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  image       String?
  bio         String?   @db.Text
  specialties String[]
  isActive    Boolean   @default(true)
  bookings    Booking[]
}

// Content-related models
model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?  @db.Text
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVisible Boolean  @default(true)
}

model BlogPost {
  id         String    @id @default(cuid())
  title      String
  slug       String    @unique
  excerpt    String
  content    String    @db.Text
  image      String?
  tags       String[]
  categories Category[]
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPublished Boolean   @default(false)
}

model Discount {
  id              String    @id @default(cuid())
  code            String    @unique
  description     String?
  discountPercent Int?
  discountAmount  Decimal?  @db.Decimal(10, 2)
  isActive        Boolean   @default(true)
  startDate       DateTime
  endDate         DateTime
  minPurchase     Decimal?  @db.Decimal(10, 2)
  maxUses         Int?
  usedCount       Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model StoreLocation {
  id          String  @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  email       String?
  coordinates Json?    // { lat: number, lng: number }
  openingHours Json    // { day: string, open: string, close: string }[]
  isActive    Boolean @default(true)
}

// Enums
enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum PaymentMethod {
  STRIPE
  MPESA
  CASH
  BANK_TRANSFER
}